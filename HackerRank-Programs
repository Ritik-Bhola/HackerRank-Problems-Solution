#Designer Door Mat

N, M = map(int,input().split())
for i in range(1,N,2): 
    print((i * ".|.").center(M, "-"))
print("WELCOME".center(M,"-"))
for i in range(N-2,-1,-2): 
    print((i * ".|.").center(M, "-"))

#itertools.product()


from itertools import product
A = list(map(int,input().split()))
B = list(map(int,input().split()))

print ((*product(A,B)))

#itertools.permutations()

from itertools import permutations
st,N = input().split()
li = list(permutations(st,int(N)))
li.sort()
for i in li:
    print("".join(i))

#collections.Counter()

import collections

numShoes = int(input())
shoes = collections.Counter(map(int, input().split()))
numCust = int(input())

income = 0

for i in range(numCust):
    size, price = map(int, input().split())
    if shoes[size]: 
        income += price
        shoes[size] -= 1

print(income)

#collections.namedtuple()

from collections import namedtuple
N = int(input())
students = namedtuple('student',input().split())
total = 0
for i in range(N):
    field1, field2, field3,field4 = input().split()
    student = students(field1,field2,field3,field4)
    total += int(student.MARKS)
print('{:.2f}'.format(total/N))

#Polar Coordinates

import cmath
s = input()
print(abs(complex(s)))
print(cmath.phase(complex(s)))

#No Idea

n,m = map(int,input().split())
arr = input().split()
a = set(input().split())
b = set(input().split())
happiness = 0
for i in arr:
    if i in a:
        happiness+=1
    if i in b:
        happiness-=1
print(happiness)

#Set .discard(), .remove() & .pop()

n = int(input())
s = set(map(int, input().split()))
N = int(input())
for i in range(N):
    com = input().split()
    if com[0] == "remove":
        s.remove(int(com[1]))
    if com[0] == "discard":
        s.discard(int(com[1]))
    if com[0] == "pop":
        s.pop()
print(sum(s))

#set.difference

n = int(input())
a = set(input().split())
m = int(input())
b = set(input().split())
print(len(a.difference(b)))

# set mutation

n = int(input())
A =  set(input().split())
N = int(input())
for i in range(N):
    com = input().split()
    B = set(input().split())
    if com[0]=="intersection_update":
        A.intersection_update(B)
    if com[0] == "update":
        A.update(B)
    if com[0] == "symmetric_difference_update":
        A.symmetric_difference_update(B)
    if com[0] == 'difference_update':
        A.difference_update(B)
print(sum(map(int,A)))


#Time Delta

from dateutil import parser

for _ in range(int(input())):
    d1 = parser.parse(input().strip())
    d2 = parser.parse(input().strip())
    print(abs(int((d2-d1).total_seconds())))

#Arrays

import numpy

def arrays(arr):
    # complete this function
    # use numpy.array
    return(numpy.array(arr[::-1], float))

arr = input().strip().split(' ')
result = arrays(arr)
print(result)

#Concatinate

import numpy as np
n,m,p = map(int,input().split())
A = np.array([input().split() for i in range(n)],int)
B = np.array([input().split() for i in range(m)],int)
print(np.concatenate((A,B), axis = 0))

#Transpose and flatten

import numpy as np
n,m = map(int,input().split())
A = np.array([input().split() for i in range(n)],int)
print(np.transpose(A))
print(A.flatten())

# Zero and ones

nums = list(map(int, input().split()))
print (numpy.zeros(nums, dtype = numpy.int))
print (numpy.ones(nums, dtype = numpy.int))

#Array Mathematics

import numpy as np
n,m = map(int,input().split())
A = np.array([input().split() for i in range(n)],int)
B = np.array([input().split() for i in range(n)],int)
print(np.add(A,B))
print(np.subtract(A,B))
print(np.multiply(A,B))
print((A//B))
print(np.mod(A,B))
print(np.power(A,B))

#Floor, ceil and rint

import numpy as np
np.set_printoptions(sign=' ')
A = np.array(list(map(float,input().split())))
print(np.floor(A))
print(np.ceil(A))
print(np.rint(A))


#Sum and prod

import numpy as np
n,m = map(int, input().split())
A = np.array([input().split() for i in range(n)],int)
print(np.prod(np.sum(A,axis=0)))


#min, max

import numpy as np
n,m = map(int, input().split())
A = np.array([input().split() for i in range(n)],int)
print(np.max(np.min(A,axis=1)))

# Mean, var and std

import numpy as np
n,m = map(int, input().split())
A = np.array([input().split() for i in range(n)],int)
print(np.mean(A,axis=1))
print(np.var(A,axis=0))
print(round(np.std(A), 11))

#dot,cross

import numpy as np
n = int(input())
A = np.array([input().split() for i in range(n)],int)
B = np.array([input().split() for i in range(n)],int)
print(np.dot(A,B))

#Inner and outer product
import numpy as np
A = np.array(input().split(),int)
B = np.array(input().split(),int)
print(np.inner(A,B))
print(np.outer(A,B))

#Athlete sort

N, M = map(int, input().split())
j = [[int(x) for x in input().split()] for i in range(N)]
k = int(input())
j.sort(key=lambda row: row[k])
for m in j:
    print(*m)

#any,all()

